#!/bin/bash
{
# Copyright (c) 2012-2016
# See LICENSE for details.
#
# Israel Jacquez <mrkotfw@gmail.com>
# Dave Murphy <davem@devkitpro.org>

PROGNAME=`basename "${0}"`

CONFIG_FILENAME="config"
CONFIG_IN_FILENAME="config.in"
CONFIG_PATH="./${CONFIG_FILENAME}"

# Function message:
#   ${@} => Message
function message() {
    local _message="${@}"

    printf -- "${_message}\n"
}

# Function panic:
#   ${1} => Message
#   ${2} => Exit status code
function panic() {
    local _message="${1}"
    local _exit_code=${2}

    printf -- "${PROGNAME}: Error: %s\n" "${_message}" 1>&2
    exit ${_exit_code}
}

source="${BASH_SOURCE[0]}"
while [ -h "${source}" ]; do # Resolve ${source} until the file is no longer a symlink
    ROOT="$(cd -P "$(dirname "${source}")" && pwd)"
    source="$(readlink "${source}")"
    # If ${source} was a relative symlink, we need to resolve it
    # relative to the path where the symlink file was located
    [[ ${source} != /* ]] && source="${ROOT}/${source}"
done
ROOT="$(cd -P "$(dirname "${source}" )" && pwd)"
unset source

if [[ "${ROOT}" != "`pwd`" ]]; then
    panic "You must be in \`${ROOT}' in order to invoke ${PROGNAME}"
fi

# Function is_program_exists
#   ${1} => Program name
function is_program_exists() {
    local _program_name="${1}"

    command -v "${_program_name}" >/dev/null 2>&1
}

# Look for automated configuration file
if ! [ -f "${CONFIG_PATH}" ]; then
    panic "Configuration file \`${CONFIG_FILENAME}' not found; see \`${CONFIG_IN_FILENAME}'" 1
fi

if ! is_program_exists "awk" && ! is_program_exists "gawk"; then
    panic "Programs awk or gawk do not exist in \${PATH}" 1
fi

error_line=`cat "${CONFIG_PATH}" | awk '
BEGIN {
    line = 0;
}

{
    line++;
}

# Ignore comments and empty lines
/^(\s*#.*|\s*)$/ {
    next;
}

# Match valid assignments
! /^\s*[A-Z_][0-9A-Z_]+=(\"[^\"]*\"|[0-9]+)\s*$/ {
    print line;
    exit 1
}'`

if [ ${?} -ne 0 ]; then
    panic "Syntax error in configuration file \`${CONFIG_FILENAME}' on line ${error_line}" 1
fi
unset error_line

source "${CONFIG_PATH}" > /dev/null 2>&1

# Function is_var_set:
#   ${1} => Variable
function is_var_set() {
    if [[ ! "${!1}" && "${!1-_}" ]]; then
        panic "Variable \"${1}\" does not exist in your config file" 1
    fi
}

# Function check_boolean:
#   ${1} => Value
function check_boolean() {
    if [[ "${!1}" != "no" && "${!1}" != "yes" ]]; then
        panic "Variable \"${1}\" has an invalid value in your config file" 1
    fi
}

# Function program_exists
#   ${1} => Program name
function program_exists() {
    local _program_name="${1}"

    if ! is_program_exists "${_program_name}"; then
        panic "Program \"${_program_name}\" does not exist in \${PATH}" 1
    fi
}

# Function fetch:
#   ${1} => URL
function fetch() {
    local _url="${1}"

    "${FETCH}" "${FETCH_FLAGS}" "${_url}"
    local _exit_code=${?}

    case "${FETCH}" in
        wget)
            # Kludge: It looks like GNU Wget doesn't return the
            # correct exit status code.
            if [ ${_exit_code} -ge 2 ] && [ ${_exit_code} -le 8 ]; then
                return 1
            fi
            return 0
            ;;
        *)
            return ${_exit_code}
    esac
}

# Function checksum_gpg:
#   ${1} => File (.sig file)
function checksum_gpg() {
    local _file="${1}"

    "${GPG}" --verify --keyring "${BUILD_SRC_DIR}/${GNU_KEYRING}" "${_file}"
    local _exit_code=${?}
    return ${_exit_code}
}

# Function checksum_md5:
#   ${1} => File (.md5 file)
#   ${2} => Archive file
function checksum_md5() {
    local _file="${1}"
    local _archive="${2}"

    # The md5.sum is a special (annoying) case
    local _md5=
    local _calculated_md5=

    _md5=`cat "${_file}" 2> /dev/null | grep "${_archive}" 2> /dev/null | sed 's/[[:space:]][[:space:]]*/,/g' | cut -d ',' -f 1`
    case "${MD5}" in
        "md5")
            _calculated_md5=`"${MD5}" "${_archive}" | awk '{ print $1; }'`
            ;;
        "md5sum")
            _calculated_md5=`"${MD5}" "${_archive}" | sed -r -n 's/^([a-f0-9][a-f0-9]*)\s+.*?$/\1/pg'`
            ;;
    esac

    if [ -z "${_md5}" ] || [[ "${_calculated_md5}" != "${_md5}" ]]; then
        return 1
    fi

    return 0
}

# Function clean_stamps_up:
#
function clean_stamps_up() {
    if [ -z "${BUILD_STAMPS_DIR}" ]; then
        exit 1
    fi

    for target in ${TARGETS[@]}; do
        message "Cleaning up stamps '${BUILD_SRC_DIR}'"
        # Globbing doesn't work with single or double quotes
        rm -f "${BUILD_STAMPS_DIR}/${target}-"*
    done
}

# Function clean_targets_up:
#
function clean_targets_up() {
    if [ -z "${BUILD_SRC_DIR}" ]; then
        exit 1
    fi

    for target in ${TARGETS[@]}; do
        message "Cleaning up target ${target} in '${BUILD_SRC_DIR}'"
        rm -r -f "${BUILD_SRC_DIR}/${target}"
    done
}

# Function clean_up:
#
function clean_up() {
    clean_stamps_up
    clean_targets_up
}

# Function apply_patch:
#   ${1} => Target
#   ${2} => Type
#   ${3} => Patch filename
function apply_patch() {
    local _target="${1}"
    local _type="${2}"
    local _patch="${3}"

    local _patch_filename="${_type}-${_patch}"

    if ! [ -f "${BUILD_STAMPS_DIR}/${_target}-applied-patches-${_type}" ]; then
        message "Applying patch '${_patch_filename}'"

        # Determine if we can patch
        test -f "${_target}/patches/${_patch_filename}" \
            && (patch -d "${BUILD_SRC_DIR}/${_target}" --dry-run -p 0 < \
                      "${_target}/patches/${_patch_filename}")  1> /dev/null 2>&1 \
            || panic "Couldn't apply patch" 1

        # Patch
        patch -d "${BUILD_SRC_DIR}/${_target}" -p 0 < \
              "${_target}/patches/${_patch_filename}" 1> /dev/null 2>&1

        create_stamp "${_target}-applied-patches-${_type}"
    fi
}

# Function create_stamp:
#   ${1} => Name
function create_stamp() {
    local _name="${1}"

    touch "${BUILD_STAMPS_DIR}/${_name}"
}

# Function build_target:
#
function build_target() {
    local _path="${1}"

    if [ -f "${_path}/scripts/init" ]; then
        source "${_path}/scripts/init"
    fi

    if [ -f "${_path}/scripts/extract" ]; then
        source "${_path}/scripts/extract"
    fi

    if [ -f "${_path}/scripts/patch" ]; then
        source "${_path}/scripts/patch"
    fi

    if [ -f "${_path}/scripts/build" ]; then
        source "${_path}/scripts/build"
    fi

    if [ -f "${_path}/scripts/strip" ]; then
        source "${_path}/scripts/strip"
    fi

    if [ -f "${_path}/scripts/finish" ]; then
        source "${_path}/scripts/finish"
    fi
}

trap 'exit_code=${?}; clean_up; exit ${exit_code}' 1 9 15

for var in \
    "OPTION_DOWNLOAD_TARBALLS" \
    "OPTION_BUILD_GDB" \
    "OPTION_BUILD_MAKE"; do
    is_var_set "${var}"
    check_boolean "${var}"
done
unset var

for var in \
    "BUILD_HOST" \
    "BUILD_TARGETS" \
    "GNU_URL" \
    "GCC_INFRASTRUCTURE_URL" \
    "NEWLIB_URL" \
    "BUILD_INSTALL_DIR" \
    "BUILD_SRC_DIR" \
    "BINUTILS_VERSION" \
    "BUILD_MAKE_JOBS" \
    "GCC_VERSION" \
    "GMP_VERSION" \
    "MPFR_VERSION" \
    "MPC_VERSION" \
    "NEWLIB_VERSION" \
    "GDB_VERSION" \
    "MAKE_VERSION" \
    "MAKE" \
    "AWK" \
    "GPG" \
    "MD5" \
    "PATCH" \
    "FETCH" \
    "FETCH_FLAGS"; do
    is_var_set "${var}"
done
unset var

for program in \
    "MAKE" \
    "AWK" \
    "GPG" \
    "MD5" \
    "PATCH" \
    "FETCH"; do
    program_exists "${!program}"
done
unset program

TARGETS=(`printf -- "${BUILD_TARGETS}" | sed -E 's/[[:space:]]+/ /g'`)

BUILD_STAMPS_DIR="${BUILD_SRC_DIR}/stamps"

if [ ${#TARGETS[@]} -eq 0 ]; then
    panic "Invalid build target(s)" 1
fi

BINUTILS_TARBALL="binutils-${BINUTILS_VERSION}.tar.bz2"
BINUTILS_TARBALL_URL="${GNU_URL}/gnu/binutils/${BINUTILS_TARBALL}"
BINUTILS_SIG="${BINUTILS_TARBALL}.sig"
BINUTILS_SIG_URL="${GNU_URL}/gnu/binutils/${BINUTILS_SIG}"
BINUTILS_SRC_DIR="binutils-${BINUTILS_VERSION}"

GCC_TARBALL="gcc-${GCC_VERSION}.tar.bz2"
GCC_TARBALL_URL="${GNU_URL}/gnu/gcc/gcc-${GCC_VERSION}/${GCC_TARBALL}"
GCC_SIG="${GCC_TARBALL}.sig"
GCC_SIG_URL="${GNU_URL}/gnu/gcc/gcc-${GCC_VERSION}/${GCC_SIG}"
GCC_SRC_DIR="gcc-${GCC_VERSION}"

GMP_TARBALL="gmp-${GMP_VERSION}.tar.bz2"
GMP_TARBALL_URL="${GNU_URL}/gnu/gmp/${GMP_TARBALL}"
GMP_SIG="${GMP_TARBALL}.sig"
GMP_SIG_URL="${GNU_URL}/gnu/gmp/${GMP_SIG}"
GMP_SRC_DIR="${GCC_SRC_DIR}/gmp"

MPFR_TARBALL="mpfr-${MPFR_VERSION}.tar.bz2"
MPFR_TARBALL_URL="${GNU_URL}/gnu/mpfr/${MPFR_TARBALL}"
MPFR_SIG="${MPFR_TARBALL}.sig"
MPFR_SIG_URL="${GNU_URL}/gnu/mpfr/${MPFR_SIG}"
MPFR_SRC_DIR="${GCC_SRC_DIR}/mpfr"

MPC_TARBALL="mpc-${MPC_VERSION}.tar.gz"
MPC_TARBALL_URL="${GCC_INFRASTRUCTURE_URL}/pub/gcc/infrastructure/${MPC_TARBALL}"
MPC_MD5="md5.sum"
MPC_RENAMED_MD5="mpc.md5.sum"
MPC_MD5_URL="${GCC_INFRASTRUCTURE_URL}/pub/gcc/infrastructure/${MPC_MD5}"
MPC_SRC_DIR="${GCC_SRC_DIR}/mpc"

NEWLIB_TARBALL="newlib-${NEWLIB_VERSION}.tar.gz"
NEWLIB_TARBALL_URL="${NEWLIB_URL}/pub/newlib/${NEWLIB_TARBALL}"
NEWLIB_MD5="md5.sum"
NEWLIB_RENAMED_MD5="newlib.md5.sum"
NEWLIB_MD5_URL="${NEWLIB_URL}/pub/newlib/${NEWLIB_MD5}"
NEWLIB_SRC_DIR="newlib-${NEWLIB_VERSION}"

GDB_TARBALL="gdb-${GDB_VERSION}.tar.bz2"
GDB_TARBALL_URL="${GNU_URL}/gnu/gdb/${GDB_TARBALL}"
GDB_SIG="${GDB_TARBALL}.sig"
GDB_SIG_URL="${GNU_URL}/gnu/gdb/${GDB_SIG}"
GDB_SRC_DIR="gdb-${GDB_VERSION}"

MAKE_TARBALL="make-${MAKE_VERSION}.tar.bz2"
MAKE_TARBALL_URL="${GNU_URL}/gnu/make/${MAKE_TARBALL}"
MAKE_SIG="${MAKE_TARBALL}.sig"
MAKE_SIG_URL="${GNU_URL}/gnu/make/${MAKE_SIG}"
MAKE_SRC_DIR="make-${MAKE_VERSION}"

GNU_KEYRING="gnu-keyring.gpg"
GNU_KEYRING_URL="${GNU_URL}/gnu/${GNU_KEYRING}"

# Get preferred installation directory and set paths to the sources
# Make sure we have the proper permissions
mkdir -p "${BUILD_INSTALL_DIR}" 1> /dev/null 2>&1 && \
    test -x "${BUILD_INSTALL_DIR}" && \
    test -w "${BUILD_INSTALL_DIR}" && \
    test -r "${BUILD_INSTALL_DIR}" || \
    panic "Couldn't create install directory" 1

if ! [ -d "${BUILD_SRC_DIR}" ]; then
    panic "Path \`${BUILD_SRC_DIR}/' is non-existent" 1
fi

# Create stamps directory
mkdir -p "${BUILD_STAMPS_DIR}" 1> /dev/null 2>&1 || \
    panic "Couldn't create ${BUILD_STAMPS_DIR}" 1

cd "${BUILD_SRC_DIR}/" 2> /dev/null
if [[ "${OPTION_DOWNLOAD_TARBALLS}" == "no" ]]; then
    message "Be sure to have the following files in ${BUILD_SRC_DIR}:"
    printf -- "  ${GNU_KEYRING}\n"
    printf -- "  ${BINUTILS_TARBALL}\n"
    printf -- "  ${BINUTILS_SIG}\n"
    printf -- "  ${GCC_TARBALL}\n"
    printf -- "  ${GCC_SIG}\n"
    printf -- "  ${GMP_TARBALL}\n"
    printf -- "  ${GMP_SIG}\n"
    printf -- "  ${MPFR_TARBALL}\n"
    printf -- "  ${MPFR_SIG}\n"
    printf -- "  ${MPC_TARBALL}\n"
    printf -- "  ${MPC_MD5}\n"
    printf -- "  ${NEWLIB_TARBALL}\n"
    printf -- "  ${NEWLIB_MD5}\n"
    if [[ "${OPTION_BUILD_GDB}" == "yes" ]]; then
        printf -- "  ${GDB_TARBALL}\n"
        printf -- "  ${GDB_SIG}\n"
    fi
    if [[ "${OPTION_BUILD_MAKE}" == "yes" ]]; then
        printf -- "  ${MAKE_TARBALL}\n"
        printf -- "  ${MAKE_SIG}\n"
    fi
else
    if ! [ -f "${BUILD_STAMPS_DIR}/downloaded-tarballs" ]; then
        message "Downloading files..."

        if ! [ -f "${BINUTILS_TARBALL}" ]; then
            message "Downloading \`${BINUTILS_TARBALL}'"
            if ! fetch "${BINUTILS_TARBALL_URL}" 1>> "binutils-download.log" 2>&1; then
                panic "Failed to download ${BINUTILS_TARBALL} from ${BINUTILS_TARBALL_URL} (see \`${BUILD_SRC_DIR}/binutils-download.log')" 1
            fi
        fi
        if ! [ -f "${BINUTILS_SIG}" ]; then
            if ! fetch "${BINUTILS_SIG_URL}" 1>> "binutils-download.log" 2>&1; then
                panic "Failed to download ${BINUTILS_SIG} (see \`${BUILD_SRC_DIR}/binutils-download.log')" 1
            fi
        fi

        if ! [ -f "${GCC_TARBALL}" ]; then
            message "Downloading \`${GCC_TARBALL}'"
            if ! fetch "${GCC_TARBALL_URL}"  1>> "gcc-download.log" 2>&1; then
                panic "Failed to download ${GCC_TARBALL} from ${GCC_TARBALL_URL} (see \`${BUILD_SRC_DIR}/gcc-download.log')" 1
            fi
        fi
        if ! [ -f "${GCC_SIG}" ]; then
            if ! fetch "${GCC_SIG_URL}" 1>> "gcc-download.log" 2>&1; then
                panic "Failed to download ${GCC_SIG} from ${GCC_SIG_URL}) (see \`${BUILD_SRC_DIR}/gcc-download.log')" 1
            fi
        fi

        if ! [ -f "${GMP_TARBALL}" ]; then
            message "Downloading \`${GMP_TARBALL}'"
            if ! fetch "${GMP_TARBALL_URL}"  1>> "gmp-download.log" 2>&1; then
                panic "Failed to download ${GMP_TARBALL} from ${GMP_TARBALL_URL} (see \`${BUILD_SRC_DIR}/gmp-download.log')" 1
            fi
        fi
        if ! [ -f "${GMP_SIG}" ]; then
            if ! fetch "${GMP_SIG_URL}" 1>> "gmp-download.log" 2>&1; then
                panic "Failed to download ${GMP_SIG} from ${GMP_SIG_URL}) (see \`${BUILD_SRC_DIR}/gmp-download.log')" 1
            fi
        fi

        if ! [ -f "${MPFR_TARBALL}" ]; then
            message "Downloading \`${MPFR_TARBALL}'"
            if ! fetch "${MPFR_TARBALL_URL}"  1>> "mpfr-download.log" 2>&1; then
                panic "Failed to download ${MPFR_TARBALL} from ${MPFR_TARBALL_URL} (see \`${BUILD_SRC_DIR}/mpfr-download.log')" 1
            fi
        fi
        if ! [ -f "${MPFR_SIG}" ]; then
            if ! fetch "${MPFR_SIG_URL}" 1>> "mpfr-download.log" 2>&1; then
                panic "Failed to download ${MPFR_SIG} from ${MPFR_SIG_URL}) (see \`${BUILD_SRC_DIR}/mpfr-download.log')" 1
            fi
        fi

        if ! [ -f "${MPC_TARBALL}" ]; then
            message "Downloading \`${MPC_TARBALL}'"
            if ! fetch "${MPC_TARBALL_URL}"  1>> "mpc-download.log" 2>&1; then
                panic "Failed to download ${MPC_TARBALL} from ${MPC_TARBALL_URL} (see \`${BUILD_SRC_DIR}/mpc-download.log')" 1
            fi
        fi
        if ! [ -f "${MPC_RENAMED_MD5}" ]; then
            if ! fetch "${MPC_MD5_URL}" 1>> "mpc-download.log" 2>&1; then
                panic "Failed to download ${MPC_MD5} from ${MPC_MD5_URL}) (see \`${BUILD_SRC_DIR}/mpc-download.log')" 1
            fi

            mv -f "${MPC_MD5}" "${MPC_RENAMED_MD5}"
        fi

        if ! [ -f "${NEWLIB_TARBALL}" ]; then
            message "Downloading \`${NEWLIB_TARBALL}'"
            if ! fetch "${NEWLIB_TARBALL_URL}"  1>> "newlib-download.log" 2>&1; then
                panic "Failed to download ${NEWLIB_TARBALL} from ${NEWLIB_URL} (see \`${BUILD_SRC_DIR}/newlib-download.log')" 1
            fi
        fi

        if ! [ -f "${NEWLIB_RENAMED_MD5}" ]; then
            if ! fetch "${NEWLIB_MD5_URL}" 1>> "newlib-download.log" 2>&1; then
                panic "Failed to download ${NEWLIB_MD5} from ${NEWLIB_MD5_URL}) (see \`${BUILD_SRC_DIR}/newlib-download.log')" 1
            fi

            mv -f "${NEWLIB_MD5}" "${NEWLIB_RENAMED_MD5}"
        fi

        if [[ "${OPTION_BUILD_GDB}" == "yes" ]]; then
            if ! [ -f "${GDB_TARBALL}" ]; then
                message "Downloading \`${GDB_TARBALL}'"
                if ! fetch "${GDB_TARBALL_URL}" 1>> "gdb-download.log" 2>&1; then
                    panic "Failed to download ${GDB_TARBALL} from ${GDB_TARBALL_URL} (see \`${BUILD_SRC_DIR}/gdb-download.log')" 1
                fi
            fi
            if ! [ -f "${GDB_SIG}" ]; then
                if ! fetch "${GDB_SIG_URL}" 1>> "gdb-download.log" 2>&1; then
                    panic "Failed to download ${GDB_SIG} from ${GDB_SIG_URL} (see \`${BUILD_SRC_DIR}/gdb-download.log')" 1
                fi
            fi
        fi

        if [[ "${OPTION_BUILD_MAKE}" == "yes" ]]; then
            if ! [ -f "${MAKE_TARBALL}" ]; then
                message "Downloading \`${MAKE_TARBALL}'"
                if ! fetch "${MAKE_TARBALL_URL}" 1>> "make-download.log" 2>&1; then
                    panic "Failed to download ${MAKE_TARBALL} from ${MAKE_TARBALL_URL} (see \`${BUILD_SRC_DIR}/make-download.log')" 1
                fi
            fi
            if ! [ -f "${MAKE_SIG}" ]; then
                if ! fetch "${MAKE_SIG_URL}" 1>> "make-download.log" 2>&1; then
                    panic "Failed to download ${MAKE_SIG} from ${MAKE_SIG_URL} (see \`${BUILD_SRC_DIR}/make-download.log')" 1
                fi
            fi
        fi

        if ! [ -f "${GNU_KEYRING}" ]; then
            message "Downloading \`${GNU_KEYRING}'"
            if ! fetch "${GNU_KEYRING_URL}"  1>> "gcc-download.log" 2>&1; then
                panic "Failed to download ${GNU_KEYRING} from ${GNU_KEYRING_URL} (see \`${BUILD_SRC_DIR}/gcc-download.log')" 1
            fi
        fi

        create_stamp "downloaded-tarballs"
    fi
fi

if ! [ -f "${BUILD_STAMPS_DIR}/checked-integrity" ]; then
    if ! [ -f "${GNU_KEYRING}" ]; then
        panic "\`${GNU_KEYRING}' not found"
    fi

    if ! [ -f "${BINUTILS_TARBALL}" ]; then
        panic "\`${BINUTILS_TARBALL}' not found" 1
    fi
    if ! [ -f "${BINUTILS_SIG}" ]; then
        panic "\`${BINUTILS_SIG}' not found" 1
    fi

    if ! [ -f "${GCC_TARBALL}" ]; then
        panic "\`${GCC_TARBALL}' not found" 1
    fi
    if ! [ -f "${GCC_SIG}" ]; then
        panic "\`${GCC_SIG}' not found" 1
    fi

    if ! [ -f "${GMP_TARBALL}" ]; then
        panic "\`${GMP_TARBALL}' not found" 1
    fi
    if ! [ -f "${GMP_SIG}" ]; then
        panic "\`${GMP_SIG}' not found" 1
    fi

    if ! [ -f "${MPFR_TARBALL}" ]; then
        panic "\`${MPFR_TARBALL}' not found" 1
    fi
    if ! [ -f "${MPFR_SIG}" ]; then
        panic "\`${MPFR_SIG}' not found" 1
    fi

    if ! [ -f "${MPC_TARBALL}" ]; then
        panic "\`${MPC_TARBALL}' not found" 1
    fi
    if ! [ -f "${MPC_RENAMED_MD5}" ]; then
        panic "\`${MPC_RENAMED_MD5}' not found" 1
    fi

    if ! [ -f "${NEWLIB_TARBALL}" ]; then
        panic "\`${NEWLIB_TARBALL}' not found" 1
    fi
    if ! [ -f "${NEWLIB_RENAMED_MD5}" ]; then
        panic "\`${NEWLIB_RENAMED_MD5}' not found" 1
    fi

    if [[ "${OPTION_BUILD_GDB}" == "yes" ]]; then
        if ! [ -f "${GDB_TARBALL}" ]; then
            panic "\`${GDB_TARBALL}' not found" 1
        fi
        if ! [ -f "${GDB_SIG}" ]; then
            panic "\`${GDB_SIG}' not found" 1
        fi
    fi

    message "Checking integrity..."

    # Check integrity
    message "Checking integrity of \`${BINUTILS_TARBALL}'"
    if ! checksum_gpg "${BINUTILS_SIG}" 1>> "binutils-download.log" 2>&1; then
        panic "Integrity check for ${BINUTILS_TARBALL} failed (see \`${BUILD_SRC_DIR}/binutils-download.log')" 1
    fi

    message "Checking integrity of \`${GCC_TARBALL}'"
    if ! checksum_gpg "${GCC_SIG}" 1>> "gcc-download.log" 2>&1; then
        panic "Integrity check for ${GCC_TARBALL} failed (see \`${BUILD_SRC_DIR}/gcc-download.log')" 1
    fi

    message "Checking integrity of \`${GMP_TARBALL}'"
    if ! checksum_gpg "${GMP_SIG}" 1>> "gmp-download.log" 2>&1; then
        panic "Integrity check for ${GMP_TARBALL} failed (see \`${BUILD_SRC_DIR}/gmp-download.log')" 1
    fi

    message "Checking integrity of \`${MPFR_TARBALL}'"
    if ! checksum_gpg "${MPFR_SIG}" 1>> "mpfr-download.log" 2>&1; then
        panic "Integrity check for ${MPFR_TARBALL} failed (see \`${BUILD_SRC_DIR}/mpfr-download.log')" 1
    fi

    message "Checking integrity of \`${MPC_TARBALL}'"
    if ! checksum_md5 "${MPC_RENAMED_MD5}" "${MPC_TARBALL}" 1>> "mpc-download.log" 2>&1; then
        panic "Integrity check for ${MPC_TARBALL} failed (see \`${BUILD_SRC_DIR}/mpc-download.log')" 1
    fi

    message "Checking integrity of \`${NEWLIB_TARBALL}'"
    if ! checksum_md5 "${NEWLIB_RENAMED_MD5}" "${NEWLIB_TARBALL}" 1>> "newlib-download.log" 2>&1; then
        panic "Integrity check for ${NEWLIB_TARBALL} failed (see \`${BUILD_SRC_DIR}/newlib-download.log')" 1
    fi

    if [[ "${OPTION_BUILD_GDB}" == "yes" ]]; then
        message "Checking integrity of \`${GDB_TARBALL}'"
        if ! checksum_gpg "${GDB_SIG}" 1>> "gdb-download.log" 2>&1; then
            panic "Integrity check for ${GDB_TARBALL} failed (see \`${BUILD_SRC_DIR}/gdb-download.log')" 1
        fi
    fi

    if [[ "${OPTION_BUILD_MAKE}" == "yes" ]]; then
        message "Checking integrity of \`${MAKE_TARBALL}'"
        if ! checksum_gpg "${MAKE_SIG}" 1>> "make-download.log" 2>&1; then
            panic "Integrity check for ${MAKE_TARBALL} failed (see \`${BUILD_SRC_DIR}/make-download.log')" 1
        fi
    fi

    create_stamp "checked-integrity"
fi
cd - 1> /dev/null

message "Building targets: `echo ${TARGETS[@]} | sed -E 's/ /, /g'`"

for target in ${TARGETS[@]}; do
    if [ -f "${BUILD_STAMPS_DIR}/${target}-completed-build" ]; then
        continue
    fi

    if ! [ -z "${BUILD_HOST}" ]; then
        # In order to build a Canadian Cross build-x-host-x-target,
        # you need to first build the build-x-host cross-compiler and
        # the build-x-target cross-compiler.

        # Use the path to the build-x-target build for the entire build process
        export PATH="${BUILD_SRC_DIR}/build-x-target/${target}/bin:${PATH}"

        if ! [ -f "${BUILD_STAMPS_DIR}/${target}-completed-build-x-target" ]; then
            message "Building build-x-target (${target})"

            (BUILD_HOST=""
             BUILD_INSTALL_DIR="${BUILD_SRC_DIR}/build-x-target"

             build_target "${target}"
             clean_up

             create_stamp "${target}-completed-build-x-target") || exit ${?}
        fi
    else
        export PATH="${BUILD_INSTALL_DIR}/${target}/bin:${PATH}"
    fi

    message "Building build-x-host-x-target (${target})"

    build_target "${target}"
    clean_up
done

if ! [ -f "${BUILD_STAMPS_DIR}/make-completed-build" ]; then
    build_target "make"
fi
}
